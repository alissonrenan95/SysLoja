/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import BO.CategoriaProduto;
import BO.Estoque;
import BO.Fornecedor;
import BO.Fornecimento;
import BO.FornecimentoEstoque;
import BO.Produto;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Renan
 */
public class FrameFornecimento extends javax.swing.JFrame {

    /**
     * Creates new form FrameFornecimento
     */
    public FrameFornecimento() {
        initComponents();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lbfornecimento = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbproduto = new javax.swing.JTable();
        btrealizarfornec = new javax.swing.JButton();
        btconfirmarecebimento = new javax.swing.JButton();
        btcancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtvalortotal = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lbidfornec = new javax.swing.JLabel();
        txtidfornec = new javax.swing.JTextField();
        lbdatapedido = new javax.swing.JLabel();
        txtdtpedido = new javax.swing.JFormattedTextField(pegarFormatterDate());
        lbdtprevista = new javax.swing.JLabel();
        txtdtprevista = new javax.swing.JFormattedTextField(pegarFormatterDate());
        lbdtrecebido = new javax.swing.JLabel();
        txtdtrecebido = new javax.swing.JFormattedTextField(pegarFormatterDate());
        lbfornecedor = new javax.swing.JLabel();
        txtfornecedor = new javax.swing.JTextField();
        cbfornecedor = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lbqtdproduto = new javax.swing.JLabel();
        txtqtdproduto = new javax.swing.JTextField();
        lbcodproduto = new javax.swing.JLabel();
        txtcodbarra = new javax.swing.JTextField();
        lbcategoria = new javax.swing.JLabel();
        cbcategoria = new javax.swing.JComboBox();
        lbnomeproduto = new javax.swing.JLabel();
        txtnomeproduto = new javax.swing.JTextField();
        cbnomeproduto = new javax.swing.JComboBox();
        lbvalorunitario = new javax.swing.JLabel();
        txtvalorunitario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lbdtfab = new javax.swing.JLabel();
        txtdtfab = new javax.swing.JFormattedTextField(pegarFormatterDate());
        lbdtvenc = new javax.swing.JLabel();
        txtdtvenc = new javax.swing.JFormattedTextField(pegarFormatterDate());
        btconfirmaritem = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lbpesquisa = new javax.swing.JLabel();
        rbnome = new javax.swing.JRadioButton();
        rbdata = new javax.swing.JRadioButton();
        txtpesquisa = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbfornecimento = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fornecimento");
        setMaximumSize(new java.awt.Dimension(660, 708));
        setMinimumSize(new java.awt.Dimension(660, 708));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lbfornecimento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/fornecimento.png"))); // NOI18N
        lbfornecimento.setText("Fornecimento");

        jScrollPane3.setFocusable(false);

        tbproduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nome", "Valor Unit.", "Qtde.", "Valor Total", "Data Fab.", "Data Venc."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbproduto.setFocusable(false);
        tbproduto.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(tbproduto);

        btrealizarfornec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/salvar.jpeg"))); // NOI18N
        btrealizarfornec.setText("Realizar Fornecimento");
        btrealizarfornec.setEnabled(false);
        btrealizarfornec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btrealizarfornecActionPerformed(evt);
            }
        });

        btconfirmarecebimento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/alterar.jpg"))); // NOI18N
        btconfirmarecebimento.setText("Confirmar Recebimento");
        btconfirmarecebimento.setEnabled(false);
        btconfirmarecebimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btconfirmarecebimentoActionPerformed(evt);
            }
        });

        btcancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/cancelar.png"))); // NOI18N
        btcancelar.setText("Cancelar");
        btcancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btcancelarActionPerformed(evt);
            }
        });

        jLabel1.setText("Valor Total");

        txtvalortotal.setEditable(false);
        txtvalortotal.setEnabled(false);

        lbidfornec.setText("ID");

        txtidfornec.setEditable(false);
        txtidfornec.setEnabled(false);

        lbdatapedido.setText("Data Pedido");

        lbdtprevista.setText("Data de Recebimento");

        lbdtrecebido.setText("Recebido em ");

        txtdtrecebido.setEnabled(false);

        lbfornecedor.setText("Fornecedor");

        txtfornecedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtfornecedorFocusLost(evt);
            }
        });
        txtfornecedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtfornecedorKeyReleased(evt);
            }
        });

        cbfornecedor.setFocusable(false);

        jLabel2.setText("Informações do Fornecimento");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lbidfornec, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtidfornec, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbdatapedido)
                                .addGap(22, 22, 22)
                                .addComponent(txtdtpedido, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbdtprevista)
                                .addGap(18, 18, 18)
                                .addComponent(txtdtprevista, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtfornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(cbfornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(69, 69, 69))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbdtrecebido, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtdtrecebido, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbfornecedor)
                        .addGap(34, 34, 34))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbidfornec)
                    .addComponent(txtidfornec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbdatapedido)
                    .addComponent(txtdtpedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbdtprevista)
                    .addComponent(txtdtprevista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbdtrecebido)
                    .addComponent(txtdtrecebido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbfornecedor)
                    .addComponent(cbfornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbqtdproduto.setText("Qtde.");

        txtqtdproduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtqtdprodutoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtqtdprodutoKeyReleased(evt);
            }
        });

        lbcodproduto.setText("Codigo");

        txtcodbarra.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtcodbarraFocusLost(evt);
            }
        });
        txtcodbarra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcodbarraKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtcodbarraKeyReleased(evt);
            }
        });

        lbcategoria.setText("Categoria");

        cbcategoria.setFocusable(false);
        cbcategoria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbcategoriaItemStateChanged(evt);
            }
        });

        lbnomeproduto.setText("Nome");

        txtnomeproduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtnomeprodutoFocusLost(evt);
            }
        });
        txtnomeproduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtnomeprodutoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtnomeprodutoKeyReleased(evt);
            }
        });

        cbnomeproduto.setFocusable(false);

        lbvalorunitario.setText("Valor (R$)");

        jLabel3.setText("Informações dos Produtos");

        lbdtfab.setText("Data de Fabricação");

        txtdtfab.setEnabled(false);

        lbdtvenc.setText("Data de Vencimento");

        txtdtvenc.setEnabled(false);

        btconfirmaritem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/entrar.png"))); // NOI18N
        btconfirmaritem.setText("Confirmar");
        btconfirmaritem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btconfirmaritemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(251, 251, 251))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lbnomeproduto, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbnomeproduto, 0, 281, Short.MAX_VALUE)
                                    .addComponent(txtnomeproduto)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lbcodproduto, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtcodbarra)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbvalorunitario)
                            .addComponent(lbcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btconfirmaritem, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(txtvalorunitario, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbqtdproduto)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtqtdproduto, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lbdtfab)
                        .addGap(33, 33, 33)
                        .addComponent(txtdtfab, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbdtvenc)
                        .addGap(18, 18, 18)
                        .addComponent(txtdtvenc, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcodbarra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbcategoria)
                    .addComponent(cbcategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbcodproduto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtqtdproduto)
                    .addComponent(lbqtdproduto)
                    .addComponent(txtvalorunitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbvalorunitario)
                    .addComponent(txtnomeproduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbnomeproduto))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(cbnomeproduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbdtvenc)
                            .addComponent(txtdtvenc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbdtfab)
                            .addComponent(txtdtfab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btconfirmaritem)))
                .addGap(2, 2, 2))
        );

        lbpesquisa.setText("Pesquisa");

        buttonGroup1.add(rbnome);
        rbnome.setSelected(true);
        rbnome.setText("Nome do Produto");
        rbnome.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnomeItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbdata);
        rbdata.setText("Data(DD/MM/AAAA)");
        rbdata.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbdataItemStateChanged(evt);
            }
        });

        txtpesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpesquisaKeyReleased(evt);
            }
        });

        jLabel4.setText("Consulta");

        jScrollPane1.setFocusable(false);

        tbfornecimento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data do Pedido", "Data Prevista"
            }
        ));
        tbfornecimento.setFocusable(false);
        tbfornecimento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbfornecimentoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbfornecimento);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbpesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbnome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbdata)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtpesquisa))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(291, 291, 291)
                            .addComponent(jLabel4)
                            .addGap(277, 277, 277))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbpesquisa)
                    .addComponent(rbnome)
                    .addComponent(rbdata)
                    .addComponent(txtpesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(lbfornecimento))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btrealizarfornec)
                                        .addGap(56, 56, 56)
                                        .addComponent(btconfirmarecebimento)
                                        .addGap(53, 53, 53)
                                        .addComponent(btcancelar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(453, 453, 453)
                                        .addComponent(jLabel1)
                                        .addGap(23, 23, 23)
                                        .addComponent(txtvalortotal, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbfornecimento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtvalortotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btrealizarfornec)
                    .addComponent(btconfirmarecebimento)
                    .addComponent(btcancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    DecimalFormat formatnumber=new DecimalFormat("#0.00");
    SimpleDateFormat formatador=new SimpleDateFormat("dd/MM/yyyy");
    private void rbdataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbdataItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_rbdataItemStateChanged

    private void rbnomeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnomeItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_rbnomeItemStateChanged

    private void txtcodbarraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcodbarraKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            if(!txtcodbarra.getText().isEmpty()){
                List<Estoque> lista=new Estoque().listarPorCodBarra(Long.parseLong(txtcodbarra.getText()));
                try{
                    Estoque estoque=lista.get(0);
                    cbcategoria.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto().getCategoriaProduto()}));
                    txtnomeproduto.setText(estoque.getProduto().getNome());
                    cbnomeproduto.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto()}));
                    txtvalorunitario.requestFocus();
                }
                catch(Exception e){
                    
                }
            }
            else if(btrealizarfornec.isFocusable()){
                btrealizarfornec.requestFocus();
            }
        }
    }//GEN-LAST:event_txtcodbarraKeyPressed

    private void txtcodbarraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcodbarraKeyReleased
        // TODO add your handling code here:
        if (txtcodbarra.getText().length()==13) {
            List<Estoque> lista = new Estoque().listarPorCodBarra(Long.parseLong(txtcodbarra.getText()));
            try {
                Estoque estoque = lista.get(0);
                cbcategoria.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto().getCategoriaProduto()}));
                txtnomeproduto.setText(estoque.getProduto().getNome());
                cbnomeproduto.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto()}));
                txtvalorunitario.requestFocus();
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_txtcodbarraKeyReleased

    private void cbcategoriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbcategoriaItemStateChanged
        // TODO add your handling code here:
        txtnomeproduto.setText("");
        cbnomeproduto.removeAllItems();
        txtvalorunitario.setText("");
    }//GEN-LAST:event_cbcategoriaItemStateChanged

    private void txtnomeprodutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnomeprodutoKeyReleased
        // TODO add your handling code here:
        if(txtcodbarra.getText().isEmpty() && !txtnomeproduto.getText().isEmpty()){
            List<Produto> lista=new Produto().listarIdNomeValorPorNomeCategoriaId(txtnomeproduto.getText(), ((CategoriaProduto)cbcategoria.getSelectedItem()).getId());
            if(lista!=null && lista.size()>0){
                cbnomeproduto.setModel(new DefaultComboBoxModel(lista.toArray()));
            }
            else{
                cbnomeproduto.setModel(new DefaultComboBoxModel(new Object[]{}));
                txtvalorunitario.setText("");
            }
        }
        else{
            cbnomeproduto.setModel(new DefaultComboBoxModel(new Object[]{}));
            txtvalorunitario.setText("");
        }
    }//GEN-LAST:event_txtnomeprodutoKeyReleased

    private void txtqtdprodutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtqtdprodutoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            btconfirmaritem.doClick();
        }
    }//GEN-LAST:event_txtqtdprodutoKeyPressed

    private void txtqtdprodutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtqtdprodutoKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_txtqtdprodutoKeyReleased

    private void btconfirmaritemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btconfirmaritemActionPerformed
        // TODO add your handling code here:
            Long codbarra=0L;
            DecimalFormat formatadornumber=new DecimalFormat("#000000000");
            formatadornumber.setMinimumIntegerDigits(9);
            formatadornumber.setMaximumIntegerDigits(9);
            if(txtcodbarra.getText().isEmpty()){
                Produto prod=((Produto)cbnomeproduto.getSelectedItem());
                prod=prod.listarIdNomeValorPorNomeCategoriaId(txtnomeproduto.getText(), ((CategoriaProduto)cbcategoria.getSelectedItem()).getId()).get(0);
                prod.setCategoriaProduto((CategoriaProduto)cbcategoria.getSelectedItem());
                txtcodbarra.setText(formatadornumber.format((new Estoque().listarEstoquePorProdutoId(prod.getId()).get(0))));
            }
            Integer indice=null;
            for(int i=0; i<tbproduto.getRowCount(); i++){
                if(txtcodbarra.getText().equals(tbproduto.getValueAt(i, 0).toString())){
                    indice=i;
                    i=tbproduto.getRowCount();
                }
            }
            Integer qtdproduto=Integer.parseInt(txtqtdproduto.getText());
            Integer qtdprodutotabela=0;
            if(indice!=null){
                qtdprodutotabela=Integer.parseInt(tbproduto.getValueAt(indice, 3).toString());
            }
            if(!txtdtfab.isEnabled() && !txtdtvenc.isEnabled()){
                Integer qtdprodutototal=qtdproduto+qtdprodutotabela;
                Estoque estoque=new Estoque().consultarPorCodBarra(Long.parseLong(txtcodbarra.getText()));
                if(estoque!=null){
                    if(indice!=null){
                        ((DefaultTableModel)tbproduto.getModel()).removeRow(indice);
                    }
                    ((DefaultTableModel)tbproduto.getModel()).insertRow(0, new Object[]{txtcodbarra.getText(), cbnomeproduto.getSelectedItem(), formatnumber.format(Double.parseDouble(txtvalorunitario.getText())).replaceAll(",", "."), qtdprodutototal, formatnumber.format(Double.parseDouble(txtvalorunitario.getText())*qtdprodutototal).replaceAll(",","."),"",""});
                    if(txtvalortotal.getText().isEmpty()){
                        txtvalortotal.setText("0.00");
                    }
                    txtvalortotal.setText(formatnumber.format(((Double.parseDouble(txtvalortotal.getText()))+(estoque.getProduto().getValorUnitario()*qtdprodutototal))).replaceAll(",","."));
                    btrealizarfornec.setEnabled(true);
                }
                else{
                    JOptionPane.showMessageDialog(rootPane, "Produto não encontrado no sistema", "Erro ao inserir", JOptionPane.ERROR_MESSAGE);
                }
                txtcodbarra.setText("");
                txtnomeproduto.setText("");
                cbnomeproduto.setModel(new DefaultComboBoxModel());
                txtvalorunitario.setText("");
                txtqtdproduto.setText("");
                txtcodbarra.requestFocus();
                cbcategoria.setModel(new DefaultComboBoxModel(new CategoriaProduto().listarPorNome("").toArray()));
                
                
            }
            else{
                Date dt;
                try{
                    dt=formatador.parse(txtdtfab.getText());
                    dt=formatador.parse(txtdtvenc.getText());
                    tbproduto.setValueAt(txtdtfab.getText(), indice, 5);
                    tbproduto.setValueAt(txtdtvenc.getText(), indice, 6);
                    if(tbproduto.getRowCount()>=indice+2){
                        txtcodbarra.setText(tbproduto.getValueAt(indice+1, 0).toString());
                        Estoque e=new Estoque().listarPorCodBarra(Long.parseLong(txtcodbarra.getText())).get(0);

                        cbcategoria.setModel(new DefaultComboBoxModel(new Object[]{e.getProduto().getCategoriaProduto()}));
                        txtnomeproduto.setText(tbproduto.getValueAt(indice+1, 1).toString());
                        cbnomeproduto.setModel(new DefaultComboBoxModel(new Object[]{e.getProduto()}));
                        txtvalorunitario.setText(formatnumber.format(Double.toString(e.getProduto().getValorUnitario()).replace(",", ".")));
                        txtqtdproduto.setText(tbproduto.getValueAt(indice+1, 3).toString());
                        
                    }
                    else{
                        btconfirmarecebimento.setEnabled(true);
                        txtdtfab.setEnabled(false);
                        txtdtvenc.setEnabled(false);
                    }
                    txtdtfab.setText("");
                    txtdtvenc.setText("");
                    txtdtfab.requestFocus();
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(rootPane, "Verifique se a data foi informada corretamente","Data Inválida", JOptionPane.ERROR_MESSAGE);
                }
            }
            
    }//GEN-LAST:event_btconfirmaritemActionPerformed

    private void btrealizarfornecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btrealizarfornecActionPerformed
        // TODO add your handling code here:
        Fornecimento f=pegarDadosCampos();
        if(f!=null){
            if(f.salvar()){
                JOptionPane.showMessageDialog(rootPane, "Pedido de fornecimento salvo com sucesso", "Operação efetuada", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Verifique se você está conectado ao servidor de banco de dados", "Operação não efetuada", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Verifique se os campos foram preenchidos corretamente", "Campos inválidos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btrealizarfornecActionPerformed

    private void txtfornecedorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfornecedorKeyReleased
        // TODO add your handling code here:
        if(!txtfornecedor.getText().isEmpty()){
            cbfornecedor.setModel(new DefaultComboBoxModel(new Fornecedor().listarPorNome(txtfornecedor.getText()).toArray()));
        }
    }//GEN-LAST:event_txtfornecedorKeyReleased

    private void txtpesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpesquisaKeyReleased
        // TODO add your handling code here:
        if(!txtpesquisa.getText().isEmpty()){
            if(rbnome.isSelected()){
                tbfornecimento.setModel(getModelo(new Fornecimento().listarPorProdutoNome(txtpesquisa.getText())));

            }
            else if(txtpesquisa.getText().length()==10){
                try {
                    tbfornecimento.setModel(getModelo(new Fornecimento().listarPorDataPedido(formatador.parse(txtpesquisa.getText()))));
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
            }   
        }
    }//GEN-LAST:event_txtpesquisaKeyReleased

    private void tbfornecimentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbfornecimentoMouseClicked
        // TODO add your handling code here:
        modoalteracao(true);
        inserirValoresFornecimento((Fornecimento) tbfornecimento.getValueAt(tbfornecimento.getSelectedRow(), 0));
        btconfirmarecebimento.setEnabled(false);
        txtcodbarra.setText(tbproduto.getValueAt(0, 0).toString());
        Estoque e=new Estoque().listarPorCodBarra(Long.parseLong(txtcodbarra.getText())).get(0);
        cbcategoria.setModel(new DefaultComboBoxModel(new Object[]{e.getProduto().getCategoriaProduto()}));
        txtnomeproduto.setText(tbproduto.getValueAt(0, 1).toString());
        cbnomeproduto.setModel(new DefaultComboBoxModel(new Object[]{e.getProduto()}));
        try {
            txtvalorunitario.setText(formatnumber.format(formatnumber.parse(Double.toString(e.getProduto().getValorUnitario()))).replace(",", "."));
        } catch (ParseException ex) {
            txtvalorunitario.setText(e.getProduto().getValorUnitario().toString());
        }
        txtqtdproduto.setText(tbproduto.getValueAt(0, 3).toString());
        txtdtrecebido.requestFocus();
    }//GEN-LAST:event_tbfornecimentoMouseClicked

    private void btconfirmarecebimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btconfirmarecebimentoActionPerformed
        // TODO add your handling code here:
        Fornecimento f=pegarDadosCampos();
        if(f!=null){
            System.out.println("alterar");
            if(f.alterar()){
                JOptionPane.showMessageDialog(rootPane, "Recebimento de produtos confirmado com sucesso", "Operação efetuada", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Verifique se você está conectado ao servidor de banco de dados", "Operação não efetuada", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Verifique se os campos foram preenchidos corretamente", "Campos inválidos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btconfirmarecebimentoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        limparCampos();
        cbcategoria.setModel(new DefaultComboBoxModel(new CategoriaProduto().listarPorNome("").toArray()));
    }//GEN-LAST:event_formWindowOpened

    private void btcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btcancelarActionPerformed
        // TODO add your handling code here:
        limparCampos();
    }//GEN-LAST:event_btcancelarActionPerformed

    private void txtnomeprodutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtnomeprodutoFocusLost
        // TODO add your handling code here:
        try {
            Produto p = (Produto) cbnomeproduto.getSelectedItem();
            Estoque estoque = new Estoque().listarEstoquePorProdutoId(p.getId()).get(0);
            txtcodbarra.setText(estoque.getCodBarra().toString());
            txtnomeproduto.setText(p.getNome());
            cbcategoria.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto().getCategoriaProduto()}));
            txtvalorunitario.requestFocus();
        } catch (Exception e) {

        }
    }//GEN-LAST:event_txtnomeprodutoFocusLost

    private void txtnomeprodutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnomeprodutoKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode()==evt.VK_ENTER){
            try{
                Produto p=(Produto)cbnomeproduto.getSelectedItem();
                Estoque estoque=new Estoque().listarEstoquePorProdutoId(p.getId()).get(0);
                txtcodbarra.setText(estoque.getCodBarra().toString());
                txtnomeproduto.setText(p.getNome());
                cbcategoria.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto().getCategoriaProduto()}));
                txtvalorunitario.requestFocus();
            }
            catch(Exception e){
                
            }
        }
    }//GEN-LAST:event_txtnomeprodutoKeyPressed

    private void txtfornecedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfornecedorFocusLost
        // TODO add your handling code here:
        txtfornecedor.setText(cbfornecedor.getSelectedItem().toString());
    }//GEN-LAST:event_txtfornecedorFocusLost

    private void txtcodbarraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtcodbarraFocusLost
        // TODO add your handling code here:
        if (!txtcodbarra.getText().isEmpty()) {
            List<Estoque> lista = new Estoque().listarPorCodBarra(Long.parseLong(txtcodbarra.getText()));
            try {
                Estoque estoque = lista.get(0);
                cbcategoria.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto().getCategoriaProduto()}));
                txtnomeproduto.setText(estoque.getProduto().getNome());
                cbnomeproduto.setModel(new DefaultComboBoxModel(new Object[]{estoque.getProduto()}));
                txtvalorunitario.requestFocus();
            } catch (Exception e) {

            }
        }
    }//GEN-LAST:event_txtcodbarraFocusLost

    public void inserirValoresFornecimento(Fornecimento f){
        txtidfornec.setText(f.getId().toString());
        txtdtpedido.setText(formatador.format(f.getDataPedido()));
        txtdtprevista.setText(formatador.format(f.getDataPrevistaRecebimento()));
        try{
            txtdtrecebido.setText(formatador.format(f.getDataRecebida()));
        }
        catch(Exception e){
        }
        txtfornecedor.setText(f.getFornecedorId().getNome());
        cbfornecedor.setModel(new DefaultComboBoxModel(new Object[]{f.getFornecedorId()}));
        tbproduto.setModel(getModeloProduto(f.getFornecimentoEstoqueTotalList()));
        txtvalortotal.setText(formatnumber.format(f.getValorTotal()).replace(",", "."));
        modoalteracao(true);
    }
    public void modoalteracao(Boolean b){
        txtdtpedido.setEnabled(!b);
        txtdtprevista.setEnabled(!b);
        txtdtrecebido.setEnabled(b);
        txtfornecedor.setEnabled(!b);
        cbfornecedor.setEnabled(!b);
        txtcodbarra.setEnabled(!b);
        cbcategoria.setEnabled(!b);
        txtnomeproduto.setEnabled(!b);
        cbnomeproduto.setEnabled(!b);
        txtvalorunitario.setEnabled(!b);
        txtqtdproduto.setEnabled(!b);
        txtdtfab.setEnabled(b);
        txtdtfab.setText("");
        txtdtvenc.setEnabled(b);
        txtdtvenc.setText("");
        txtdtfab.requestFocus();
        btrealizarfornec.setEnabled(false);
    }
    
    public void limparCampos(){
        rbnome.setSelected(true);
        txtpesquisa.setText("");
        txtidfornec.setText("");
        txtdtpedido.setText(formatador.format(new Date()));
        txtdtprevista.setText("");
        txtdtrecebido.setText("");
        txtfornecedor.setText("");
        cbfornecedor.removeAllItems();
        txtcodbarra.setText("");
        cbcategoria.removeAllItems();
        txtnomeproduto.setText("");
        cbnomeproduto.removeAllItems();
        txtvalorunitario.setText("");
        txtqtdproduto.setText("");
        txtvalortotal.setText("");
        ((DefaultTableModel)tbfornecimento.getModel()).setRowCount(0);
        ((DefaultTableModel)tbproduto.getModel()).setRowCount(0);
        modoalteracao(false);
        txtpesquisa.requestFocus();
    }
    
    
    
    public DefaultTableModel getModelo(List<Fornecimento> lista){
        Vector<String> headers=new Vector<String>();
        headers.add("ID");
        headers.add("Data do Pedido");
        headers.add("Data Prevista");
        Vector<Object> vetorvalores=new Vector<Object>();
        for(Fornecimento f:lista){
            Vector vetor=new Vector();
            vetor.add(f);
            vetor.add(formatador.format(f.getDataPedido()));
            vetor.add(formatador.format(f.getDataPrevistaRecebimento()));
            vetorvalores.add(vetor);
        }
        return new DefaultTableModel(vetorvalores, headers);
    }
    DefaultTableModel getModeloProduto(List<FornecimentoEstoque> lista){
        Vector<String> headers=new Vector<String>();
        headers.add("Codigo");
        headers.add("Nome");
        headers.add("Valor Unit.");
        headers.add("Qtde.");
        headers.add("Valor Total");
        headers.add("Data Fabricação");
        headers.add("Data Vencimento");
        Vector<Object> vetorvalores=new Vector<Object>();
        for(FornecimentoEstoque fet:lista){
            Vector vetor=new Vector();
            vetor.add(new Estoque().listarEstoquePorProdutoId(fet.getEstoque().getProduto().getId()).get(0).getCodBarra());
            vetor.add(fet.getEstoque().getProduto().getNome());
            vetor.add(fet.getEstoque().getProduto().getValorUnitario());
            vetor.add(fet.getQuantidade());
            vetor.add(fet.getEstoque().getProduto().getValorUnitario()*fet.getQuantidade());
            try{
                vetor.add(formatador.format(fet.getDataFabricacao()));
                vetor.add(formatador.format(fet.getDataVencimento()));
            }
            catch(Exception e){
                vetor.add("");
                vetor.add("");
            }
            vetorvalores.add(vetor);
        }
        return new DefaultTableModel(vetorvalores, headers);
    }
    
    public Boolean verificarCampos(){
        return !txtdtpedido.getText().isEmpty()&&
               !txtdtprevista.getText().isEmpty()&&
               (btconfirmarecebimento.isEnabled())?!txtdtrecebido.getText().isEmpty():true &&
               !txtfornecedor.getText().isEmpty()&&
               !cbfornecedor.getSelectedItem().toString().isEmpty();
    }
    
    
    
    Fornecimento pegarDadosCampos(){
        if(verificarCampos()){
            Fornecimento f=new Fornecimento();
            Integer id;
            try{
                id=Integer.parseInt(txtidfornec.getText());
            }
            catch(Exception e){
                id=null;
            }
            try{
                f.setId(id);
                f.setFornecedorId((Fornecedor)cbfornecedor.getSelectedItem());
                f.setDataPedido(formatador.parse(formatador.format(new Date())));
                f.setDataPrevistaRecebimento(formatador.parse(txtdtprevista.getText()));
                if(btconfirmarecebimento.isEnabled()){
                    f.setDataRecebida(formatador.parse(txtdtrecebido.getText()));
                }
                else{
                    f.setDataRecebida(null);
                }
                List<FornecimentoEstoque> listestoque=new ArrayList();
                for(int i=0; i<tbproduto.getRowCount(); i++){
                    FornecimentoEstoque fet=new FornecimentoEstoque();
                    fet.setFornecimento(f);
                    fet.setEstoque(new Estoque().listarEstoquePorProdutoId(new Estoque().listarPorCodBarra(Long.parseLong(tbproduto.getValueAt(i, 0).toString())).get(0).getProduto().getId()).get(0));
                    fet.setDisponivelEstoque(btconfirmarecebimento.isEnabled());
                    fet.setValorUnitario(Double.parseDouble(tbproduto.getValueAt(i, 2).toString()));
                    fet.setQuantidade(Integer.parseInt(tbproduto.getValueAt(i, 3).toString()));
                    if(btconfirmarecebimento.isEnabled()){
                        fet.setDataFabricacao(formatador.parse(tbproduto.getValueAt(i, 5).toString()));
                        fet.setDataVencimento(formatador.parse(tbproduto.getValueAt(i, 6).toString()));
                    }
                    else{
                        fet.setDataFabricacao(null);
                        fet.setDataVencimento(null);
                    }
                    fet.setDisponivelEstoque(btconfirmarecebimento.isEnabled());
                    listestoque.add(fet);
                }
                f.setFornecimentoEstoqueTotalList(listestoque);
                f.setValorTotal(Double.parseDouble(txtvalortotal.getText()));
                return f;
            }
            catch(Exception e){
                return null;
            }
        }
        return null;
    }
    
    
    public MaskFormatter pegarFormatterDate(){
        MaskFormatter mformat = null;
        try{
            mformat=new MaskFormatter("##/##/####");
            mformat.setPlaceholderCharacter('_');
        }
        catch(ParseException e){
            
        }
        return mformat;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameFornecimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameFornecimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameFornecimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameFornecimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameFornecimento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btcancelar;
    private javax.swing.JButton btconfirmarecebimento;
    private javax.swing.JButton btconfirmaritem;
    private javax.swing.JButton btrealizarfornec;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbcategoria;
    private javax.swing.JComboBox cbfornecedor;
    private javax.swing.JComboBox cbnomeproduto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbcategoria;
    private javax.swing.JLabel lbcodproduto;
    private javax.swing.JLabel lbdatapedido;
    private javax.swing.JLabel lbdtfab;
    private javax.swing.JLabel lbdtprevista;
    private javax.swing.JLabel lbdtrecebido;
    private javax.swing.JLabel lbdtvenc;
    private javax.swing.JLabel lbfornecedor;
    private javax.swing.JLabel lbfornecimento;
    private javax.swing.JLabel lbidfornec;
    private javax.swing.JLabel lbnomeproduto;
    private javax.swing.JLabel lbpesquisa;
    private javax.swing.JLabel lbqtdproduto;
    private javax.swing.JLabel lbvalorunitario;
    private javax.swing.JRadioButton rbdata;
    private javax.swing.JRadioButton rbnome;
    private javax.swing.JTable tbfornecimento;
    private javax.swing.JTable tbproduto;
    private javax.swing.JTextField txtcodbarra;
    private javax.swing.JTextField txtdtfab;
    private javax.swing.JTextField txtdtpedido;
    private javax.swing.JTextField txtdtprevista;
    private javax.swing.JTextField txtdtrecebido;
    private javax.swing.JTextField txtdtvenc;
    private javax.swing.JTextField txtfornecedor;
    private javax.swing.JTextField txtidfornec;
    private javax.swing.JTextField txtnomeproduto;
    private javax.swing.JTextField txtpesquisa;
    private javax.swing.JTextField txtqtdproduto;
    private javax.swing.JTextField txtvalortotal;
    private javax.swing.JTextField txtvalorunitario;
    // End of variables declaration//GEN-END:variables
}
